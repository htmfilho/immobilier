from django.views.generic import *

from io import BytesIO
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Paragraph

from reportlab.lib.styles import ParagraphStyle
from reportlab.lib.units import mm
from PyPDF2 import PdfFileMerger,  PdfFileReader

from reportlab.lib.pagesizes import A4 as A4

PAGE_SIZE = A4
MARGIN_SIZE = 15 * mm
COLS_WIDTH = [20*mm, 55*mm, 45*mm, 15*mm, 40*mm]
STUDENTS_PER_PAGE = 24
BOTTOM_MARGIN = 18
TOP_MARGIN = 85

class MyDocTemplateMerge(SimpleDocTemplate):
    """Override the BaseDocTemplate class to do custom handle_XXX actions"""

    def __init__(self, *args, **kwargs):
        SimpleDocTemplate.__init__(self, *args, **kwargs)


    def afterFlowable(self, flowable):
         "Registers TOC entries."
         if flowable.__class__.__name__ == 'Paragraph':
             text = flowable.getPlainText()
             style = flowable.style.name
             if style == 'normal':
                 self.notify('TOCEntry', (0, text, self.page))

def merge_pdf():
    pdf1 = "pdf1.pdf"
    pdf2 = "pdf2.pdf"

    pdfs=[pdf1,pdf2, ]
    #
    buffer = BytesIO()

    doc = MyDocTemplateMerge(buffer,
                            pagesize=PAGE_SIZE,
                            rightMargin=MARGIN_SIZE,
                            leftMargin=MARGIN_SIZE,
                            topMargin=85,
                            bottomMargin=18)

    content = []


    # merge


    if not pdfs or len(pdfs) < 2:
        exit("Please enter at least two pdfs for merging!")
    no_page=2
    manual_toc = True
    if manual_toc:
        cpt = 0
        content.append(Paragraph('Table of contents' , ParagraphStyle('normal')))
        for fname in pdfs:
            input = PdfFileReader(open(fname, 'rb'))
            number_of_page = input.getNumPages()

            # lien = '<link href="#%s" color="red">is a link to %s</link>'% (fname,fname)
            #
            #
            # content.append(Paragraph('''
            #                         <para>
            #                             %s       %s-%s %s
            #                         </para>
            #                         ''' % (fname,no_page, no_page + number_of_page,lien), ParagraphStyle('normal')))

            content.append(Paragraph('%s          %s-%s' % (fname, no_page, no_page + number_of_page), ParagraphStyle('normal')))
            # ancre = '<a name="%s"></a>' % fname
            # content.append(Paragraph('''
            #                             %s
            #                         ''' % (ancre), ParagraphStyle('normal')))
            no_page = no_page + number_of_page
            cpt = cpt +1



    doc.build(content)#ne garnit que la 1iere page
    #doc.build(content, canvasmaker=NumberedCanvas)
    merger = PdfFileMerger()


    merger.setPageMode('/UseOC')
    merger.append(buffer)
    num_page = 1
    no_page=1
    cpt=0
    for fname in pdfs:
        input = PdfFileReader(open(fname, 'rb'))

        number_of_page = input.getNumPages()
        lien = "lnk2_" + str(no_page)
        lien=fname
        # ancre = '<a name="%s"></a>' % fname
        # content.append(Paragraph('''
        #
        #                             %s
        #
        #                         ''' % (ancre), ParagraphStyle('normal')) )
        merger.append(input, bookmark=lien, import_bookmarks=False)
        # merger.addNamedDestination(lien, num_page)
        # merger.addBookmark(lien,num_page)

        # if cpt==0:
        #     merger.append(input,bookmark=lien, import_bookmarks=False)
        #     doc_length = input.getNumPages()
        #     outline = input.getOutlines()
        #     print(outline)
        #     parent = merger.findBookmark(outline[-1].title)
        # else:
        #     merger.append(input,bookmark=lien, import_bookmarks=False)
        #     sub = merger.addBookmark("SUBBOOKMARK",doc_length,parent)


        num_page=num_page+1
        no_page = no_page + number_of_page
        cpt=cpt+1


    output = open("output.pdf", "wb")
    merger.write(output)
    output.close()


if __name__ == '__main__':

    merge_pdf()